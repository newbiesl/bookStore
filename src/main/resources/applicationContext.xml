<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.0.xsd 
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
						http://www.springframework.org/schema/jdbc 
						http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
    <!-- 启用注解 -->
    <context:annotation-config />
    <!-- 加载属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>
    
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="connectionProperties" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" /> 
        <property name="minIdle" value="3" /> 
        <property name="maxActive" value="500" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --> 
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --> 
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="select 1" />
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="true" />
        <property name="testWhileIdle" value="true" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 --> 
        <!-- 如果用Oracle，则把poolPreparedStatements配置为true -->
        <!-- mysql可以配置为false。分库分表较多的数据库，建议配置为false。 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --> 
        <property name="filters" value="stat" />
        <property name="connectionInitSqls" value="set names utf8mb4;"/>
        <!-- 设置默认隔离级别TRANSACTION_READ_COMMITTED = 2; mysql数据库默认是Repeatable Read 而非大多数的Read committed -->
        <property name="defaultTransactionIsolation" value="2" />
    </bean>
    
    <!-- mybatis -->
     <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:com/bookStore/persistence/config/*.xml"/>
    </bean>
    
    <!-- 配置映射接口对应的 根据映射文件生成的代理实现类bean，默认代理实现类bean的id为映射接口名（首字母小写） -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bookStore.persistence" /><!--映射接口所在的包 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">         
        <constructor-arg index="0" ref="sqlSessionFactory" />   
    </bean>
    
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 采用注解形式的声明式事务管理 -->
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!--为了防止重复创建bean ，spring容器管理不包括@controller 修饰的bean ，这些bean交由springmvc管理 -->
    <context:component-scan base-package="com.bookStore">
        <context:exclude-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
</beans>
